openapi: 3.0.0

info:
  version: '1.0'
  title: 'Wavy Web API'
  description: 'Web Resources Specification (A7) for Wavy'

servers:
- url: http://db.fe.up.pt
  description: Production server

externalDocs:
  description: Find more info here.
  url: https://gitlab.up.pt/lbaw/lbaw2425/lbaw24043/-/wikis/EAP

tags:
 - name: 'M01: Authentication'
 - name: 'M02: Users'
 - name: 'M03: Posts'
 - name: 'M04: Search'
 - name: 'M05: Administration'
 - name: 'M06: Media'

paths:
  /login:
    get:
      operationId: R101
      summary: 'R101: Login Page'
      description: 'Provide the login page. Access: NAUTH'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Show the Login Page.'
    
    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Process the login information submitted. Access: NAUTH'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '302':
          description: 'Redirect after processing the login'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Login was successful.'
                  value: '/home'
                302Error:
                  description: 'The provided credentials do not match our records.'
                  value: '/login'

  /logout:
    get:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the current authenticated user. Access: AUTH, ADMIN, OWN'
      tags:
        - 'M01: Authentication'
      responses:
        '302':
          description: 'Redirect to login after successfully processing logout.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'You have logged out successfully!'
                  value: '/login'

  /register:
    get:
      operationId: R104
      summary: 'R104: Register Page'
      description: 'Provide new user registration form. Access: NAUTH'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Show Register Page.'

    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Processes the new user registration form submission. Access: NAUTH'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
                email:
                  type: string
              required:
                  - name
                  - email
                  - password
      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'You have successfully registered & logged in!'
                  value: '/home'
                302Failure:
                  description: 'Failed Registration. Redirect to register page.'
                  value: '/register'

  /profile/{username}:
    get:
      operationId: R108
      summary: 'R108: View User Profile'
      description: 'Show the user profile. Access: NAUTH, AUTH, OWN, ADMIN'
      tags:
        - 'M02: Users'
      parameters:
        - in: path
          name: username
          schema: 
            type: string
          required: true
      responses:
        '200':
          description: 'Profile data retrieved and displayed successfully.'
        '404':
          description: 'User profile not found.'
  
  /profile/{userid}:
    put:
      operationId: R109
      summary: 'R109: Update Profile'
      description: 'Update the profile information of a user by their ID. Access: OWN, ADMIN, AUTH'
      tags:
        - 'M02: Users'
      parameters:
        - in: path
          name: userid
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Unique username'
                bio:
                  type: string
                  description: 'Short profile description'
                visibilityPublic:
                  type: boolean
                  description: 'Profile visibility (public or private)'
              required:
                  - username
                  - visibilityPublic
      responses:
        '302':
          description: 'Redirect after a successful update. User returns to the profile page'
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Successful update, Redirect to the profile page with updates.'
                  value: '/profile/{username}'
                302Failure:
                  description: 'Failed. Redirect to the profile page without updating.'
                  value: '/profile/{username}'
        '403':
          description: 'Unauthorized to update the profile.'
        '404':
          description: 'User not found.'
  
  /home:
    get:
      operationId: R110
      summary: 'R110: Access the Home Page'
      description: 'Provide access to the home page and timeline. Access: NAUTH, AUTH, ADMIN, OWN'
      tags:
        - 'M02: Users'
      responses: 
        '200':
          description: 'Successfully retrieved home page.'
        '401':
          description: 'Unauthorized access.'

  /profile/{id}/delete:
    delete:
      operationId: R111
      summary: 'R111: Delete user profile after verifying ownership'
      description: 'Processes the user password form submission to delete the account. Access: AUTH, ADMIN, OWN'
      tags:
        - 'M02: Users'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 'ID of the user to delete'
        - name: X-Request-Password
          in: header
          required: true
          schema:
            type: string
          description: 'User password for confirmation'
      responses:
        '200':
          description: 'User deleted successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User deleted successfully!'
        '302':
          description: 'Redirect after processing the user password'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'User deleted successfully!'
                  value: '/home'
                302Failure:
                  description: 'Failed to delete the user.'
                  value: '/profile/{userid}'
        '400':
          description: 'User has already been deleted.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'User has already been deleted.'
        '403':
          description: 'Incorrect password or unauthorized access.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Incorrect password. Deletion aborted.'
        '500':
          description: 'Internal server error while attempting to delete the user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to delete the user.'
  /posts/store:
    post:
      operationId: R113
      summary: 'R113: Store a Post'
      description: 'Process a post created by a user and store it into the database. Access: AUTH, OWN'
      tags:
        - 'M03: Posts'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: 'Content of the post.'
                visibilityPublic:
                  type: boolean
                  description: 'Post visibility (public or private).'
                media:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: 'Media files associated with the post (up to 4 files).'
              required:
                - message
      responses:
        '302':
          description: 'Redirect after processing the post creation'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Post created sucessfully!'
                  value: '/home'
                302Failure:
                  description: 'Post creation failed!'
                  value: '/home'
        '403':
          description: 'User is not authorized to create a post.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'You cannot create a post!'

  /posts/update/{post}:
    post:
      operationId: R114
      summary: 'R114: Update a post'
      description: 'Update a specified post by its ID. Access: OWN, ADMIN'
      tags:
        - 'M03: Posts'
      parameters:
        - in: path
          name: post
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: 'Updated content of the post.'
                visibilityPublic:
                  type: boolean
                  description: 'Updated visibility (public or private).'
                removeMedia:
                  type: string
                  description: 'JSON array of media IDs to be removed'
                media:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: 'New media files to upload (up to 4 files total, including existing ones).'
              required:
                - message
      responses:
        '302':
          description: 'Redirect after successful post update'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Post updated successfully!'
                  value: '/home'
                302Failure:
                  description: 'Post update failed.'
                  value: '/home'
        '403':
          description: 'Unauthorized to update the post.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'You are not authorized to update this post.'

  /posts/delete/{post}:
    post:
      operationId: R115
      summary: 'R115: Delete a post'
      description: 'Deletes the specified post by ID. Access: OWN, ADMIN'
      tags:
        - 'M03: Posts'
      parameters:
        - in: path
          name: post
          schema:
            type: integer
          required: true
      responses:  
        '200':
          description: 'Post deleted successfully (AJAX).'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Post deleted successfully!'
        '302':
          description: 'Redirect response after post deletion (non-AJAX).'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Post deleted successfully!'
                  value: '/home'
                302Failure:
                  description: 'Failed to delete post.'
                  value: '/home'
        '401':
          description: 'Unauthorized action.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'You are not authorized to delete this post.'
        '404':
          description: 'Post not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Post not found.'

  /search:
    get:
      operationId: R118
      summary: 'R118: Access the search page'
      description: 'Provide quick access to the search page with an optional query string and category that is defaulted to "posts". Access: NAUTH, AUTH, ADMIN, OWN'
      tags:
        - 'M04: Search'
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: 'The search query string.'
          required: false
        - in: query
          name: category
          schema:
            type: string
            enum: [posts, users]
          description: 'The category to filter the search (default: posts).'
          required: false
      responses: 
        '200':
          description: 'OK. Show the Search results.'

  /media/store:
    post:
      operationId: R123
      summary: 'R123: Store Media'
      description: 'Process and store a media file associated with a specific post. Access: OWN, AUTH, ADMIN'
      tags:
        - 'M06: Media'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 'Media file to upload. Allowed types: jpeg, png, jpg, gif, mp4, avi, mp3, wav, ogg.'
                postid:
                  type: integer
                  description: 'ID of the post to associate the media with'
              required:
                - file
                - postid
      responses:
        '302':
          description: 'Redirect after successful media upload.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Media uploaded successfully!'
                  value: '/home'
                302Failure:
                  description: 'This post already has the maximum of 4 media items.'
                  value: '/home'
          
  /api/posts:
    get:
      operationId: R116
      summary: 'R116: Fetch posts for the timeline'
      description: 'Retrieve posts for the user timeline. Access: AUTH, NAUTH, ADMIN, OWN'
      tags:
        - 'M03: Posts'
      responses:
        '200':
          description: 'Successfully retrieved posts.'

  /api/posts/{username}:
    get:
      operationId: R117
      summary: 'R117: Fetch user posts'
      description: 'Retrieve posts created by the specific user. Access: ADMIN, OWN'
      tags:
        - 'M03: Posts'
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'Successfully retrieved posts from the specific user.'

  /api/search:
    get:
      operationId: R119
      summary: 'R119: Allows search results to filter by category via AJAX'
      description: 'Search results across posts or users based on the query and category. Access: NAUTH, AUTH, ADMIN, OWN'
      tags:
        - 'M04: Search'
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: 'The search query string'
          required: false
        - in: query
          name: category
          schema:
            type: string
            enum: [posts, users]
          description: 'The category to filter the search.'
          required: false
      responses:
        '200':
          description: 'Search results successfully filtered and returned.'

  /api/auth-check:
    post:
      operationId: R106
      summary: 'R106: Check authentication status'
      description: 'Returns whether the current user is authenticated. Access: AUTH, ADMIN, OWN'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Auth status via AJAX.'

  /api/auth-id:
    post:
      operationId: R107
      summary: 'R107: Retrieve the current user ID'
      description: 'Returns the authenticated user ID and admin status. Access: AUTH, ADMIN, OWN'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'User ID and admin status via AJAX.'

  /api/{username}:
    get:
      operationId: R112
      summary: 'R112: Fetch User Data'
      description: 'Retrieve JSON details of a user by username. Access: AUTH, OWN'
      tags:
        - 'M02: Users'
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: 'Username of the user'
      responses:
        '200':
          description: 'User data retrieved successfully.'
        '404':
          description: 'User not found.'

  /admin:
    get:
      operationId: R120
      summary: 'R120: Access Admin Page'
      description: 'Provides access to the admin page. Access: ADMIN'
      tags:
        - 'M05: Administration'
      responses:
        '200':
          description: 'Successfully retrieved the admin page.'
        '403':
          description: 'Forbidden: Unauthorized access.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'You do not have permission to access the admin page.'

  /admin/users/create:
    get:
      operationId: R121
      summary: 'R121: Display User Creation Form'
      description: 'Displays the form for creating a new user. Access: ADMIN'
      tags:
        - 'M05: Administration'
      responses:
        '200':
          description: 'Successfully retrieved the user creation form.'
        '403':
          description: 'Forbidden: Unauthorized access.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'You do not have permission to access the user creation form.'

  /admin/users:
    post:
      operationId: R122
      summary: 'R122: Create a new user'
      description: 'Allows the creation of new users. Access: ADMIN'
      tags:
        - 'M05: Administration'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Unique username for the new user.'
                email:
                  type: string
                  description: 'Email address of the new user.'
                password:
                  type: string
                  description: 'Password for the new user.'
                confirmPassword:
                  type: string
                  description: 'Confirmation of the password to ensure they match.'
              required:
                - username
                - email
                - password
                - confirmPassword
      responses:
        '201':
          description: 'User created successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User created successfully!'
        '400':
          description: 'Bad request, missing required fields or invalid data.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Invalid input or missing fields.'
        '403':
          description: 'Unauthorized to perform this action.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'You do not have permission to create a user.'
